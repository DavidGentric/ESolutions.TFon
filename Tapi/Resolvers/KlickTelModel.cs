//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;



/// <summary>
/// <para>
/// Regular expression: (hint?, (error? | results*))
/// </para>
/// </summary>
public partial class responseType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<resultsType> resultsField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator responseType(XElement xe) { return XTypedServices.ToXTypedElement<responseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static responseType() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public responseType() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public hintLocalType hint {
        get {
            XElement x = this.GetElement(XName.Get("hint", ""));
            return ((hintLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("hint", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public errorLocalType error {
        get {
            XElement x = this.GetElement(XName.Get("error", ""));
            return ((errorLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("error", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public IList<resultsType> results {
        get {
            if ((this.resultsField == null)) {
                this.resultsField = new XTypedList<resultsType>(this, LinqToXsdTypeManager.Instance, XName.Get("results", ""));
            }
            return this.resultsField;
        }
        set {
            if ((value == null)) {
                this.resultsField = null;
            }
            else {
                if ((this.resultsField == null)) {
                    this.resultsField = XTypedList<resultsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("results", ""));
                }
                else {
                    XTypedServices.SetList<resultsType>(this.resultsField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string type {
        get {
            XAttribute x = this.Attribute(XName.Get("type", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("responseType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<responseType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("hint", ""), typeof(hintLocalType));
        localElementDictionary.Add(XName.Get("error", ""), typeof(errorLocalType));
        localElementDictionary.Add(XName.Get("results", ""), typeof(resultsType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
    
    public partial class hintLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator hintLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hintLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public hintLocalType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string lang {
            get {
                XAttribute x = this.Attribute(XName.Get("lang", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lang", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hint", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hintLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (number, message, what?)
    /// </para>
    /// </summary>
    public partial class errorLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator errorLocalType(XElement xe) { return XTypedServices.ToXTypedElement<errorLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static errorLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("number", "")), new NamedContentModelEntity(XName.Get("message", "")), new NamedContentModelEntity(XName.Get("what", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (number, message, what?)
        /// </para>
        /// </summary>
        public errorLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (number, message, what?)
        /// </para>
        /// </summary>
        public decimal number {
            get {
                XElement x = this.GetElement(XName.Get("number", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElement(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (number, message, what?)
        /// </para>
        /// </summary>
        public messageLocalType message {
            get {
                XElement x = this.GetElement(XName.Get("message", ""));
                return ((messageLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("message", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (number, message, what?)
        /// </para>
        /// </summary>
        public string what {
            get {
                XElement x = this.GetElement(XName.Get("what", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("what", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("error", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<errorLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("number", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("message", ""), typeof(messageLocalType));
            localElementDictionary.Add(XName.Get("what", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class messageLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator messageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<messageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public messageLocalType() {
            }
            
            public string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string lang {
                get {
                    XAttribute x = this.Attribute(XName.Get("lang", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("lang", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("message", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<messageLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (locations | trades | entries)
/// </para>
/// </summary>
public partial class resultsType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator resultsType(XElement xe) { return XTypedServices.ToXTypedElement<resultsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static resultsType() {
        BuildElementDictionary();
        contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("locations", "")), new NamedContentModelEntity(XName.Get("trades", "")), new NamedContentModelEntity(XName.Get("entries", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (locations | trades | entries)
    /// </para>
    /// </summary>
    public resultsType() {
    }
    
    public resultsType(locationsLocalType locations) {
        this.locations = locations;
    }
    
    public resultsType(tradesLocalType trades) {
        this.trades = trades;
    }
    
    public resultsType(entriesLocalType entries) {
        this.entries = entries;
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (locations | trades | entries)
    /// </para>
    /// </summary>
    public locationsLocalType locations {
        get {
            XElement x = this.GetElement(XName.Get("locations", ""));
            return ((locationsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("locations", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (locations | trades | entries)
    /// </para>
    /// </summary>
    public tradesLocalType trades {
        get {
            XElement x = this.GetElement(XName.Get("trades", ""));
            return ((tradesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("trades", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (locations | trades | entries)
    /// </para>
    /// </summary>
    public entriesLocalType entries {
        get {
            XElement x = this.GetElement(XName.Get("entries", ""));
            return ((entriesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("entries", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string type {
        get {
            XAttribute x = this.Attribute(XName.Get("type", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal first {
        get {
            XAttribute x = this.Attribute(XName.Get("first", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("first", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal last {
        get {
            XAttribute x = this.Attribute(XName.Get("last", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("last", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal count {
        get {
            XAttribute x = this.Attribute(XName.Get("count", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal total {
        get {
            XAttribute x = this.Attribute(XName.Get("total", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("total", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("resultsType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<resultsType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("locations", ""), typeof(locationsLocalType));
        localElementDictionary.Add(XName.Get("trades", ""), typeof(tradesLocalType));
        localElementDictionary.Add(XName.Get("entries", ""), typeof(entriesLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (location)+
    /// </para>
    /// </summary>
    public partial class locationsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<locationType> locationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator locationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<locationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static locationsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (location)+
        /// </para>
        /// </summary>
        public locationsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (location)+
        /// </para>
        /// </summary>
        public IList<locationType> location {
            get {
                if ((this.locationField == null)) {
                    this.locationField = new XTypedList<locationType>(this, LinqToXsdTypeManager.Instance, XName.Get("location", ""));
                }
                return this.locationField;
            }
            set {
                if ((value == null)) {
                    this.locationField = null;
                }
                else {
                    if ((this.locationField == null)) {
                        this.locationField = XTypedList<locationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("location", ""));
                    }
                    else {
                        XTypedServices.SetList<locationType>(this.locationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("locations", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<locationsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("location", ""), typeof(locationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (trade)+
    /// </para>
    /// </summary>
    public partial class tradesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tradeType> tradeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator tradesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<tradesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tradesLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (trade)+
        /// </para>
        /// </summary>
        public tradesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (trade)+
        /// </para>
        /// </summary>
        public IList<tradeType> trade {
            get {
                if ((this.tradeField == null)) {
                    this.tradeField = new XTypedList<tradeType>(this, LinqToXsdTypeManager.Instance, XName.Get("trade", ""));
                }
                return this.tradeField;
            }
            set {
                if ((value == null)) {
                    this.tradeField = null;
                }
                else {
                    if ((this.tradeField == null)) {
                        this.tradeField = XTypedList<tradeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("trade", ""));
                    }
                    else {
                        XTypedServices.SetList<tradeType>(this.tradeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("trades", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tradesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("trade", ""), typeof(tradeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (entry, filters?)+
    /// </para>
    /// </summary>
    public partial class entriesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entryType> entryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<filtersLocalType> filtersField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator entriesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<entriesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static entriesLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entry, filters?)+
        /// </para>
        /// </summary>
        public entriesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (entry, filters?)+
        /// </para>
        /// </summary>
        public IList<entryType> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entryType>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                    }
                    else {
                        XTypedServices.SetList<entryType>(this.entryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (entry, filters?)+
        /// </para>
        /// </summary>
        public IList<resultsType.entriesLocalType.filtersLocalType> filters {
            get {
                if ((this.filtersField == null)) {
                    this.filtersField = new XTypedList<filtersLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("filters", ""));
                }
                return this.filtersField;
            }
            set {
                if ((value == null)) {
                    this.filtersField = null;
                }
                else {
                    if ((this.filtersField == null)) {
                        this.filtersField = XTypedList<filtersLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("filters", ""));
                    }
                    else {
                        XTypedServices.SetList<filtersLocalType>(this.filtersField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("entries", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entriesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("entry", ""), typeof(entryType));
            localElementDictionary.Add(XName.Get("filters", ""), typeof(filtersLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (filter)+
        /// </para>
        /// </summary>
        public partial class filtersLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> filterField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator filtersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<filtersLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static filtersLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (filter)+
            /// </para>
            /// </summary>
            public filtersLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (filter)+
            /// </para>
            /// </summary>
            public IList<string> filter {
                get {
                    if ((this.filterField == null)) {
                        this.filterField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("filter", ""));
                    }
                    return this.filterField;
                }
                set {
                    if ((value == null)) {
                        this.filterField = null;
                    }
                    else {
                        if ((this.filterField == null)) {
                            this.filterField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("filter", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.filterField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("filters", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<filtersLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("filter", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            private class filterLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                "[0-9A-Z#]"}, 0, XmlSchemaWhiteSpace.Preserve));
                
                private filterLocalType() {
                }
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
/// </para>
/// </summary>
public partial class entryType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator entryType(XElement xe) { return XTypedServices.ToXTypedElement<entryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static entryType() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "")), new NamedContentModelEntity(XName.Get("subtype", "")), new NamedContentModelEntity(XName.Get("mediaflag", "")), new NamedContentModelEntity(XName.Get("entrytype", "")), new NamedContentModelEntity(XName.Get("firstname", "")), new NamedContentModelEntity(XName.Get("lastname", "")), new NamedContentModelEntity(XName.Get("salutation", "")), new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("nobility", "")), new NamedContentModelEntity(XName.Get("addition", "")), new NamedContentModelEntity(XName.Get("displayname", "")), new NamedContentModelEntity(XName.Get("company", "")), new NamedContentModelEntity(XName.Get("prefix", "")), new NamedContentModelEntity(XName.Get("suffix", "")), new NamedContentModelEntity(XName.Get("bookable", "")), new NamedContentModelEntity(XName.Get("marketing", "")), new NamedContentModelEntity(XName.Get("location", "")), new NamedContentModelEntity(XName.Get("urls", "")), new NamedContentModelEntity(XName.Get("emails", "")), new NamedContentModelEntity(XName.Get("openinghours", "")), new NamedContentModelEntity(XName.Get("slogan", "")), new NamedContentModelEntity(XName.Get("news", "")), new NamedContentModelEntity(XName.Get("additionalinfo", "")), new NamedContentModelEntity(XName.Get("productinfo", "")), new NamedContentModelEntity(XName.Get("moreinfo", "")), new NamedContentModelEntity(XName.Get("media", "")), new NamedContentModelEntity(XName.Get("keywords", "")), new NamedContentModelEntity(XName.Get("distances", "")), new NamedContentModelEntity(XName.Get("targetdistance", "")), new NamedContentModelEntity(XName.Get("trades", "")), new NamedContentModelEntity(XName.Get("paymentmethods", "")), new NamedContentModelEntity(XName.Get("customercards", "")), new NamedContentModelEntity(XName.Get("phonenumbers", "")), new NamedContentModelEntity(XName.Get("contacts", "")), new NamedContentModelEntity(XName.Get("subentries", "")), new NamedContentModelEntity(XName.Get("subsidiaries", "")), new NamedContentModelEntity(XName.Get("hotelinfo", "")), new NamedContentModelEntity(XName.Get("ratings", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public entryType() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public typeLocalType type {
        get {
            XElement x = this.GetElement(XName.Get("type", ""));
            return ((typeLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("type", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string subtype {
        get {
            XElement x = this.GetElement(XName.Get("subtype", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("subtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public System.Nullable<int> mediaflag {
        get {
            XElement x = this.GetElement(XName.Get("mediaflag", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("mediaflag", ""), value, "mediaflag", booleanType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string entrytype1 {
        get {
            XElement x = this.GetElement(XName.Get("entrytype", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("entrytype", ""), value, "entrytype1", entrytype1LocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string firstname {
        get {
            XElement x = this.GetElement(XName.Get("firstname", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("firstname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string lastname {
        get {
            XElement x = this.GetElement(XName.Get("lastname", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("lastname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string salutation {
        get {
            XElement x = this.GetElement(XName.Get("salutation", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("salutation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string title {
        get {
            XElement x = this.GetElement(XName.Get("title", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string nobility {
        get {
            XElement x = this.GetElement(XName.Get("nobility", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("nobility", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string addition {
        get {
            XElement x = this.GetElement(XName.Get("addition", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("addition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string displayname {
        get {
            XElement x = this.GetElement(XName.Get("displayname", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("displayname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string company {
        get {
            XElement x = this.GetElement(XName.Get("company", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("company", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string prefix {
        get {
            XElement x = this.GetElement(XName.Get("prefix", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("prefix", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string suffix {
        get {
            XElement x = this.GetElement(XName.Get("suffix", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("suffix", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public System.Nullable<int> bookable {
        get {
            XElement x = this.GetElement(XName.Get("bookable", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("bookable", ""), value, "bookable", booleanType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public System.Nullable<int> marketing {
        get {
            XElement x = this.GetElement(XName.Get("marketing", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("marketing", ""), value, "marketing", booleanType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public locationType location {
        get {
            XElement x = this.GetElement(XName.Get("location", ""));
            return ((locationType)(x));
        }
        set {
            this.SetElement(XName.Get("location", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public urlsLocalType urls {
        get {
            XElement x = this.GetElement(XName.Get("urls", ""));
            return ((urlsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("urls", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public emailsLocalType emails {
        get {
            XElement x = this.GetElement(XName.Get("emails", ""));
            return ((emailsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("emails", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public openinghoursLocalType openinghours {
        get {
            XElement x = this.GetElement(XName.Get("openinghours", ""));
            return ((openinghoursLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("openinghours", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string slogan {
        get {
            XElement x = this.GetElement(XName.Get("slogan", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("slogan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string news {
        get {
            XElement x = this.GetElement(XName.Get("news", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("news", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string additionalinfo {
        get {
            XElement x = this.GetElement(XName.Get("additionalinfo", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("additionalinfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string productinfo {
        get {
            XElement x = this.GetElement(XName.Get("productinfo", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("productinfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public string moreinfo {
        get {
            XElement x = this.GetElement(XName.Get("moreinfo", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("moreinfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public mediaLocalType media {
        get {
            XElement x = this.GetElement(XName.Get("media", ""));
            return ((mediaLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("media", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public keywordsLocalType keywords {
        get {
            XElement x = this.GetElement(XName.Get("keywords", ""));
            return ((keywordsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("keywords", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public distancesLocalType distances {
        get {
            XElement x = this.GetElement(XName.Get("distances", ""));
            return ((distancesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("distances", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public targetdistanceLocalType targetdistance {
        get {
            XElement x = this.GetElement(XName.Get("targetdistance", ""));
            return ((targetdistanceLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("targetdistance", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public tradesLocalType trades {
        get {
            XElement x = this.GetElement(XName.Get("trades", ""));
            return ((tradesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("trades", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public paymentmethodsLocalType paymentmethods {
        get {
            XElement x = this.GetElement(XName.Get("paymentmethods", ""));
            return ((paymentmethodsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("paymentmethods", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public customercardsLocalType customercards {
        get {
            XElement x = this.GetElement(XName.Get("customercards", ""));
            return ((customercardsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("customercards", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public phonenumbersLocalType phonenumbers {
        get {
            XElement x = this.GetElement(XName.Get("phonenumbers", ""));
            return ((phonenumbersLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("phonenumbers", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public contactsLocalType contacts {
        get {
            XElement x = this.GetElement(XName.Get("contacts", ""));
            return ((contactsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("contacts", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public subentriesLocalType subentries {
        get {
            XElement x = this.GetElement(XName.Get("subentries", ""));
            return ((subentriesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("subentries", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public subsidiariesLocalType subsidiaries {
        get {
            XElement x = this.GetElement(XName.Get("subsidiaries", ""));
            return ((subsidiariesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("subsidiaries", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public hotelinfoLocalType hotelinfo {
        get {
            XElement x = this.GetElement(XName.Get("hotelinfo", ""));
            return ((hotelinfoLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("hotelinfo", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (type, subtype, mediaflag?, entrytype1?, firstname?, lastname?, salutation?, title?, nobility?, addition?, displayname, company?, prefix?, suffix?, bookable?, marketing?, location?, urls?, emails?, openinghours?, slogan?, news?, additionalinfo?, productinfo?, moreinfo?, media?, keywords?, distances?, targetdistance?, trades?, paymentmethods?, customercards?, phonenumbers?, contacts?, subentries?, subsidiaries?, hotelinfo?, ratings?)
    /// </para>
    /// </summary>
    public ratingsLocalType ratings {
        get {
            XElement x = this.GetElement(XName.Get("ratings", ""));
            return ((ratingsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("ratings", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string id {
        get {
            XAttribute x = this.Attribute(XName.Get("id", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("entryType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<entryType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("type", ""), typeof(typeLocalType));
        localElementDictionary.Add(XName.Get("subtype", ""), typeof(string));
        localElementDictionary.Add(XName.Get("mediaflag", ""), typeof(int));
        localElementDictionary.Add(XName.Get("entrytype", ""), typeof(string));
        localElementDictionary.Add(XName.Get("firstname", ""), typeof(string));
        localElementDictionary.Add(XName.Get("lastname", ""), typeof(string));
        localElementDictionary.Add(XName.Get("salutation", ""), typeof(string));
        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
        localElementDictionary.Add(XName.Get("nobility", ""), typeof(string));
        localElementDictionary.Add(XName.Get("addition", ""), typeof(string));
        localElementDictionary.Add(XName.Get("displayname", ""), typeof(string));
        localElementDictionary.Add(XName.Get("company", ""), typeof(string));
        localElementDictionary.Add(XName.Get("prefix", ""), typeof(string));
        localElementDictionary.Add(XName.Get("suffix", ""), typeof(string));
        localElementDictionary.Add(XName.Get("bookable", ""), typeof(int));
        localElementDictionary.Add(XName.Get("marketing", ""), typeof(int));
        localElementDictionary.Add(XName.Get("location", ""), typeof(locationType));
        localElementDictionary.Add(XName.Get("urls", ""), typeof(urlsLocalType));
        localElementDictionary.Add(XName.Get("emails", ""), typeof(emailsLocalType));
        localElementDictionary.Add(XName.Get("openinghours", ""), typeof(openinghoursLocalType));
        localElementDictionary.Add(XName.Get("slogan", ""), typeof(string));
        localElementDictionary.Add(XName.Get("news", ""), typeof(string));
        localElementDictionary.Add(XName.Get("additionalinfo", ""), typeof(string));
        localElementDictionary.Add(XName.Get("productinfo", ""), typeof(string));
        localElementDictionary.Add(XName.Get("moreinfo", ""), typeof(string));
        localElementDictionary.Add(XName.Get("media", ""), typeof(mediaLocalType));
        localElementDictionary.Add(XName.Get("keywords", ""), typeof(keywordsLocalType));
        localElementDictionary.Add(XName.Get("distances", ""), typeof(distancesLocalType));
        localElementDictionary.Add(XName.Get("targetdistance", ""), typeof(targetdistanceLocalType));
        localElementDictionary.Add(XName.Get("trades", ""), typeof(tradesLocalType));
        localElementDictionary.Add(XName.Get("paymentmethods", ""), typeof(paymentmethodsLocalType));
        localElementDictionary.Add(XName.Get("customercards", ""), typeof(customercardsLocalType));
        localElementDictionary.Add(XName.Get("phonenumbers", ""), typeof(phonenumbersLocalType));
        localElementDictionary.Add(XName.Get("contacts", ""), typeof(contactsLocalType));
        localElementDictionary.Add(XName.Get("subentries", ""), typeof(subentriesLocalType));
        localElementDictionary.Add(XName.Get("subsidiaries", ""), typeof(subsidiariesLocalType));
        localElementDictionary.Add(XName.Get("hotelinfo", ""), typeof(hotelinfoLocalType));
        localElementDictionary.Add(XName.Get("ratings", ""), typeof(ratingsLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    public partial class typeLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator typeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<typeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typeLocalType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mediatype {
            get {
                XAttribute x = this.Attribute(XName.Get("mediatype", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mediatype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("type", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typeLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    private class entrytype1LocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "business",
                        "governmentagency",
                        "private"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private entrytype1LocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (url)*
    /// </para>
    /// </summary>
    public partial class urlsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<urlType> urlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator urlsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<urlsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static urlsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (url)*
        /// </para>
        /// </summary>
        public urlsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (url)*
        /// </para>
        /// </summary>
        public IList<urlType> url {
            get {
                if ((this.urlField == null)) {
                    this.urlField = new XTypedList<urlType>(this, LinqToXsdTypeManager.Instance, XName.Get("url", ""));
                }
                return this.urlField;
            }
            set {
                if ((value == null)) {
                    this.urlField = null;
                }
                else {
                    if ((this.urlField == null)) {
                        this.urlField = XTypedList<urlType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("url", ""));
                    }
                    else {
                        XTypedServices.SetList<urlType>(this.urlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("urls", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<urlsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("url", ""), typeof(urlType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (email)*
    /// </para>
    /// </summary>
    public partial class emailsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emailType> emailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator emailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<emailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static emailsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (email)*
        /// </para>
        /// </summary>
        public emailsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (email)*
        /// </para>
        /// </summary>
        public IList<emailType> email {
            get {
                if ((this.emailField == null)) {
                    this.emailField = new XTypedList<emailType>(this, LinqToXsdTypeManager.Instance, XName.Get("email", ""));
                }
                return this.emailField;
            }
            set {
                if ((value == null)) {
                    this.emailField = null;
                }
                else {
                    if ((this.emailField == null)) {
                        this.emailField = XTypedList<emailType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("email", ""));
                    }
                    else {
                        XTypedServices.SetList<emailType>(this.emailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("emails", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emailsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("email", ""), typeof(emailType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((format1 | format2 | format3), info)
    /// </para>
    /// </summary>
    public partial class openinghoursLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator openinghoursLocalType(XElement xe) { return XTypedServices.ToXTypedElement<openinghoursLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static openinghoursLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((format1 | format2 | format3), info)
        /// </para>
        /// </summary>
        public openinghoursLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((format1 | format2 | format3), info)
        /// </para>
        /// </summary>
        public format1LocalType format1 {
            get {
                XElement x = this.GetElement(XName.Get("format1", ""));
                return ((format1LocalType)(x));
            }
            set {
                this.SetElement(XName.Get("format1", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((format1 | format2 | format3), info)
        /// </para>
        /// </summary>
        public format2LocalType format2 {
            get {
                XElement x = this.GetElement(XName.Get("format2", ""));
                return ((format2LocalType)(x));
            }
            set {
                this.SetElement(XName.Get("format2", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((format1 | format2 | format3), info)
        /// </para>
        /// </summary>
        public format3LocalType format3 {
            get {
                XElement x = this.GetElement(XName.Get("format3", ""));
                return ((format3LocalType)(x));
            }
            set {
                this.SetElement(XName.Get("format3", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((format1 | format2 | format3), info)
        /// </para>
        /// </summary>
        public string info {
            get {
                XElement x = this.GetElement(XName.Get("info", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("info", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("openinghours", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<openinghoursLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("format1", ""), typeof(format1LocalType));
            localElementDictionary.Add(XName.Get("format2", ""), typeof(format2LocalType));
            localElementDictionary.Add(XName.Get("format3", ""), typeof(format3LocalType));
            localElementDictionary.Add(XName.Get("info", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (data)+
        /// </para>
        /// </summary>
        public partial class format1LocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> dataField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator format1LocalType(XElement xe) { return XTypedServices.ToXTypedElement<format1LocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static format1LocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (data)+
            /// </para>
            /// </summary>
            public format1LocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (data)+
            /// </para>
            /// </summary>
            public IList<string> data {
                get {
                    if ((this.dataField == null)) {
                        this.dataField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("data", ""));
                    }
                    return this.dataField;
                }
                set {
                    if ((value == null)) {
                        this.dataField = null;
                    }
                    else {
                        if ((this.dataField == null)) {
                            this.dataField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("data", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.dataField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("format1", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<format1LocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("data", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (row)+
        /// </para>
        /// </summary>
        public partial class format2LocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<rowLocalType> rowField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator format2LocalType(XElement xe) { return XTypedServices.ToXTypedElement<format2LocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static format2LocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (row)+
            /// </para>
            /// </summary>
            public format2LocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (row)+
            /// </para>
            /// </summary>
            public IList<entryType.openinghoursLocalType.format2LocalType.rowLocalType> row {
                get {
                    if ((this.rowField == null)) {
                        this.rowField = new XTypedList<rowLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("row", ""));
                    }
                    return this.rowField;
                }
                set {
                    if ((value == null)) {
                        this.rowField = null;
                    }
                    else {
                        if ((this.rowField == null)) {
                            this.rowField = XTypedList<rowLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("row", ""));
                        }
                        else {
                            XTypedServices.SetList<rowLocalType>(this.rowField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("format2", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<format2LocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("row", ""), typeof(rowLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (col1, col2)
            /// </para>
            /// </summary>
            public partial class rowLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator rowLocalType(XElement xe) { return XTypedServices.ToXTypedElement<rowLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static rowLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("col1", "")), new NamedContentModelEntity(XName.Get("col2", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (col1, col2)
                /// </para>
                /// </summary>
                public rowLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (col1, col2)
                /// </para>
                /// </summary>
                public string col1 {
                    get {
                        XElement x = this.GetElement(XName.Get("col1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("col1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (col1, col2)
                /// </para>
                /// </summary>
                public string col2 {
                    get {
                        XElement x = this.GetElement(XName.Get("col2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("col2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("row", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<rowLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("col1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("col2", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (row)+
        /// </para>
        /// </summary>
        public partial class format3LocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<rowLocalType> rowField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator format3LocalType(XElement xe) { return XTypedServices.ToXTypedElement<format3LocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static format3LocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (row)+
            /// </para>
            /// </summary>
            public format3LocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (row)+
            /// </para>
            /// </summary>
            public IList<entryType.openinghoursLocalType.format3LocalType.rowLocalType> row {
                get {
                    if ((this.rowField == null)) {
                        this.rowField = new XTypedList<rowLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("row", ""));
                    }
                    return this.rowField;
                }
                set {
                    if ((value == null)) {
                        this.rowField = null;
                    }
                    else {
                        if ((this.rowField == null)) {
                            this.rowField = XTypedList<rowLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("row", ""));
                        }
                        else {
                            XTypedServices.SetList<rowLocalType>(this.rowField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("format3", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<format3LocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("row", ""), typeof(rowLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (weekday, begin1, end1, begin2, end2)
            /// </para>
            /// </summary>
            public partial class rowLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator rowLocalType(XElement xe) { return XTypedServices.ToXTypedElement<rowLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static rowLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("weekday", "")), new NamedContentModelEntity(XName.Get("begin1", "")), new NamedContentModelEntity(XName.Get("end1", "")), new NamedContentModelEntity(XName.Get("begin2", "")), new NamedContentModelEntity(XName.Get("end2", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (weekday, begin1, end1, begin2, end2)
                /// </para>
                /// </summary>
                public rowLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (weekday, begin1, end1, begin2, end2)
                /// </para>
                /// </summary>
                public string weekday {
                    get {
                        XElement x = this.GetElement(XName.Get("weekday", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("weekday", ""), value, "weekday", weekdayLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (weekday, begin1, end1, begin2, end2)
                /// </para>
                /// </summary>
                public string begin1 {
                    get {
                        XElement x = this.GetElement(XName.Get("begin1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("begin1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (weekday, begin1, end1, begin2, end2)
                /// </para>
                /// </summary>
                public string end1 {
                    get {
                        XElement x = this.GetElement(XName.Get("end1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("end1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (weekday, begin1, end1, begin2, end2)
                /// </para>
                /// </summary>
                public string begin2 {
                    get {
                        XElement x = this.GetElement(XName.Get("begin2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("begin2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (weekday, begin1, end1, begin2, end2)
                /// </para>
                /// </summary>
                public string end2 {
                    get {
                        XElement x = this.GetElement(XName.Get("end2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("end2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("row", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<rowLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("weekday", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("begin1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("end1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("begin2", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("end2", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class weekdayLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "Mon",
                                    "Tue",
                                    "Wed",
                                    "Thu",
                                    "Fri",
                                    "Sat",
                                    "Sun"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private weekdayLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (videos?, logos?, photos?)
    /// </para>
    /// </summary>
    public partial class mediaLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator mediaLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mediaLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static mediaLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("videos", "")), new NamedContentModelEntity(XName.Get("logos", "")), new NamedContentModelEntity(XName.Get("photos", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (videos?, logos?, photos?)
        /// </para>
        /// </summary>
        public mediaLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (videos?, logos?, photos?)
        /// </para>
        /// </summary>
        public videosLocalType videos {
            get {
                XElement x = this.GetElement(XName.Get("videos", ""));
                return ((videosLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("videos", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (videos?, logos?, photos?)
        /// </para>
        /// </summary>
        public logosLocalType logos {
            get {
                XElement x = this.GetElement(XName.Get("logos", ""));
                return ((logosLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("logos", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (videos?, logos?, photos?)
        /// </para>
        /// </summary>
        public photosLocalType photos {
            get {
                XElement x = this.GetElement(XName.Get("photos", ""));
                return ((photosLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("photos", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("media", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<mediaLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("videos", ""), typeof(videosLocalType));
            localElementDictionary.Add(XName.Get("logos", ""), typeof(logosLocalType));
            localElementDictionary.Add(XName.Get("photos", ""), typeof(photosLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (video)+
        /// </para>
        /// </summary>
        public partial class videosLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<videoLocalType> videoField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator videosLocalType(XElement xe) { return XTypedServices.ToXTypedElement<videosLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static videosLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (video)+
            /// </para>
            /// </summary>
            public videosLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (video)+
            /// </para>
            /// </summary>
            public IList<entryType.mediaLocalType.videosLocalType.videoLocalType> video {
                get {
                    if ((this.videoField == null)) {
                        this.videoField = new XTypedList<videoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("video", ""));
                    }
                    return this.videoField;
                }
                set {
                    if ((value == null)) {
                        this.videoField = null;
                    }
                    else {
                        if ((this.videoField == null)) {
                            this.videoField = XTypedList<videoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("video", ""));
                        }
                        else {
                            XTypedServices.SetList<videoLocalType>(this.videoField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("videos", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<videosLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("video", ""), typeof(videoLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (main, url, width, height, mimetype, thumb)
            /// </para>
            /// </summary>
            public partial class videoLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator videoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<videoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static videoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("main", "")), new NamedContentModelEntity(XName.Get("url", "")), new NamedContentModelEntity(XName.Get("width", "")), new NamedContentModelEntity(XName.Get("height", "")), new NamedContentModelEntity(XName.Get("mimetype", "")), new NamedContentModelEntity(XName.Get("thumb", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public videoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public int main {
                    get {
                        XElement x = this.GetElement(XName.Get("main", ""));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("main", ""), value, "main", booleanType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public string url {
                    get {
                        XElement x = this.GetElement(XName.Get("url", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public decimal width {
                    get {
                        XElement x = this.GetElement(XName.Get("width", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public decimal height {
                    get {
                        XElement x = this.GetElement(XName.Get("height", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("height", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public string mimetype {
                    get {
                        XElement x = this.GetElement(XName.Get("mimetype", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("mimetype", ""), value, "mimetype", mimetypeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (main, url, width, height, mimetype, thumb)
                /// </para>
                /// </summary>
                public thumbLocalType thumb {
                    get {
                        XElement x = this.GetElement(XName.Get("thumb", ""));
                        return ((thumbLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("thumb", ""), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<decimal> id {
                    get {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string type {
                    get {
                        XAttribute x = this.Attribute(XName.Get("type", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<int> main1 {
                    get {
                        XAttribute x = this.Attribute(XName.Get("main", ""));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("main", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("video", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<videoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("main", ""), typeof(int));
                    localElementDictionary.Add(XName.Get("url", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("width", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("height", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("mimetype", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("thumb", ""), typeof(thumbLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class mimetypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
                    
                    private mimetypeLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (url, width, height)
                /// </para>
                /// </summary>
                public partial class thumbLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator thumbLocalType(XElement xe) { return XTypedServices.ToXTypedElement<thumbLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static thumbLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("url", "")), new NamedContentModelEntity(XName.Get("width", "")), new NamedContentModelEntity(XName.Get("height", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (url, width, height)
                    /// </para>
                    /// </summary>
                    public thumbLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (url, width, height)
                    /// </para>
                    /// </summary>
                    public string url {
                        get {
                            XElement x = this.GetElement(XName.Get("url", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (url, width, height)
                    /// </para>
                    /// </summary>
                    public decimal width {
                        get {
                            XElement x = this.GetElement(XName.Get("width", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (url, width, height)
                    /// </para>
                    /// </summary>
                    public decimal height {
                        get {
                            XElement x = this.GetElement(XName.Get("height", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("height", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public System.Nullable<decimal> id {
                        get {
                            XAttribute x = this.Attribute(XName.Get("id", ""));
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("thumb", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<thumbLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("url", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("width", ""), typeof(decimal));
                        localElementDictionary.Add(XName.Get("height", ""), typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (logo)+
        /// </para>
        /// </summary>
        public partial class logosLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<logoLocalType> logoField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator logosLocalType(XElement xe) { return XTypedServices.ToXTypedElement<logosLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static logosLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (logo)+
            /// </para>
            /// </summary>
            public logosLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (logo)+
            /// </para>
            /// </summary>
            public IList<entryType.mediaLocalType.logosLocalType.logoLocalType> logo {
                get {
                    if ((this.logoField == null)) {
                        this.logoField = new XTypedList<logoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("logo", ""));
                    }
                    return this.logoField;
                }
                set {
                    if ((value == null)) {
                        this.logoField = null;
                    }
                    else {
                        if ((this.logoField == null)) {
                            this.logoField = XTypedList<logoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("logo", ""));
                        }
                        else {
                            XTypedServices.SetList<logoLocalType>(this.logoField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("logos", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<logosLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("logo", ""), typeof(logoLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (url, title, width, height, mimetype)
            /// </para>
            /// </summary>
            public partial class logoLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator logoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<logoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static logoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("url", "")), new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("width", "")), new NamedContentModelEntity(XName.Get("height", "")), new NamedContentModelEntity(XName.Get("mimetype", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (url, title, width, height, mimetype)
                /// </para>
                /// </summary>
                public logoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, title, width, height, mimetype)
                /// </para>
                /// </summary>
                public string url {
                    get {
                        XElement x = this.GetElement(XName.Get("url", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, title, width, height, mimetype)
                /// </para>
                /// </summary>
                public string title {
                    get {
                        XElement x = this.GetElement(XName.Get("title", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, title, width, height, mimetype)
                /// </para>
                /// </summary>
                public decimal width {
                    get {
                        XElement x = this.GetElement(XName.Get("width", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, title, width, height, mimetype)
                /// </para>
                /// </summary>
                public decimal height {
                    get {
                        XElement x = this.GetElement(XName.Get("height", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("height", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, title, width, height, mimetype)
                /// </para>
                /// </summary>
                public string mimetype {
                    get {
                        XElement x = this.GetElement(XName.Get("mimetype", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("mimetype", ""), value, "mimetype", mimetypeType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<decimal> id {
                    get {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("logo", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<logoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("url", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("width", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("height", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("mimetype", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (photo)+
        /// </para>
        /// </summary>
        public partial class photosLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<photoLocalType> photoField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator photosLocalType(XElement xe) { return XTypedServices.ToXTypedElement<photosLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static photosLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (photo)+
            /// </para>
            /// </summary>
            public photosLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (photo)+
            /// </para>
            /// </summary>
            public IList<entryType.mediaLocalType.photosLocalType.photoLocalType> photo {
                get {
                    if ((this.photoField == null)) {
                        this.photoField = new XTypedList<photoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("photo", ""));
                    }
                    return this.photoField;
                }
                set {
                    if ((value == null)) {
                        this.photoField = null;
                    }
                    else {
                        if ((this.photoField == null)) {
                            this.photoField = XTypedList<photoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("photo", ""));
                        }
                        else {
                            XTypedServices.SetList<photoLocalType>(this.photoField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("photos", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<photosLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("photo", ""), typeof(photoLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (url, width, height, mimetype, title)
            /// </para>
            /// </summary>
            public partial class photoLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator photoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<photoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static photoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("url", "")), new NamedContentModelEntity(XName.Get("width", "")), new NamedContentModelEntity(XName.Get("height", "")), new NamedContentModelEntity(XName.Get("mimetype", "")), new NamedContentModelEntity(XName.Get("title", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (url, width, height, mimetype, title)
                /// </para>
                /// </summary>
                public photoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, width, height, mimetype, title)
                /// </para>
                /// </summary>
                public string url {
                    get {
                        XElement x = this.GetElement(XName.Get("url", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, width, height, mimetype, title)
                /// </para>
                /// </summary>
                public decimal width {
                    get {
                        XElement x = this.GetElement(XName.Get("width", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, width, height, mimetype, title)
                /// </para>
                /// </summary>
                public decimal height {
                    get {
                        XElement x = this.GetElement(XName.Get("height", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("height", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, width, height, mimetype, title)
                /// </para>
                /// </summary>
                public string mimetype {
                    get {
                        XElement x = this.GetElement(XName.Get("mimetype", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("mimetype", ""), value, "mimetype", mimetypeType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (url, width, height, mimetype, title)
                /// </para>
                /// </summary>
                public string title {
                    get {
                        XElement x = this.GetElement(XName.Get("title", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<decimal> id {
                    get {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<int> main {
                    get {
                        XAttribute x = this.Attribute(XName.Get("main", ""));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("main", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("photo", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<photoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("url", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("width", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("height", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("mimetype", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (keyword)+
    /// </para>
    /// </summary>
    public partial class keywordsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keywordLocalType> keywordField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator keywordsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<keywordsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static keywordsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (keyword)+
        /// </para>
        /// </summary>
        public keywordsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (keyword)+
        /// </para>
        /// </summary>
        public IList<entryType.keywordsLocalType.keywordLocalType> keyword {
            get {
                if ((this.keywordField == null)) {
                    this.keywordField = new XTypedList<keywordLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("keyword", ""));
                }
                return this.keywordField;
            }
            set {
                if ((value == null)) {
                    this.keywordField = null;
                }
                else {
                    if ((this.keywordField == null)) {
                        this.keywordField = XTypedList<keywordLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("keyword", ""));
                    }
                    else {
                        XTypedServices.SetList<keywordLocalType>(this.keywordField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("keywords", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<keywordsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("keyword", ""), typeof(keywordLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public partial class keywordLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator keywordLocalType(XElement xe) { return XTypedServices.ToXTypedElement<keywordLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public keywordLocalType() {
            }
            
            public string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("keyword", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<keywordLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (distance)+
    /// </para>
    /// </summary>
    public partial class distancesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<distanceLocalType> distanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator distancesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<distancesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static distancesLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (distance)+
        /// </para>
        /// </summary>
        public distancesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (distance)+
        /// </para>
        /// </summary>
        public IList<entryType.distancesLocalType.distanceLocalType> distance {
            get {
                if ((this.distanceField == null)) {
                    this.distanceField = new XTypedList<distanceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("distance", ""));
                }
                return this.distanceField;
            }
            set {
                if ((value == null)) {
                    this.distanceField = null;
                }
                else {
                    if ((this.distanceField == null)) {
                        this.distanceField = XTypedList<distanceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("distance", ""));
                    }
                    else {
                        XTypedServices.SetList<distanceLocalType>(this.distanceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("distances", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<distancesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("distance", ""), typeof(distanceLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (type, value)
        /// </para>
        /// </summary>
        public partial class distanceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator distanceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<distanceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static distanceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "")), new NamedContentModelEntity(XName.Get("value", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (type, value)
            /// </para>
            /// </summary>
            public distanceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (type, value)
            /// </para>
            /// </summary>
            public string type {
                get {
                    XElement x = this.GetElement(XName.Get("type", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("type", ""), value, "type", typeLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (type, value)
            /// </para>
            /// </summary>
            public float value {
                get {
                    XElement x = this.GetElement(XName.Get("value", ""));
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string unit {
                get {
                    XAttribute x = this.Attribute(XName.Get("unit", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("unit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("distance", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<distanceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("type", ""), typeof(string));
                localElementDictionary.Add(XName.Get("value", ""), typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class typeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "airport",
                                "trainstation",
                                "tradefair",
                                "publictransport",
                                "center",
                                "highway"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private typeLocalType() {
                }
            }
        }
    }
    
    public partial class targetdistanceLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator targetdistanceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<targetdistanceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public targetdistanceLocalType() {
        }
        
        public float TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string unit {
            get {
                XAttribute x = this.Attribute(XName.Get("unit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("unit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("targetdistance", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<targetdistanceLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (trade)+
    /// </para>
    /// </summary>
    public partial class tradesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tradeLocalType> tradeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator tradesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<tradesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tradesLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (trade)+
        /// </para>
        /// </summary>
        public tradesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (trade)+
        /// </para>
        /// </summary>
        public IList<entryType.tradesLocalType.tradeLocalType> trade {
            get {
                if ((this.tradeField == null)) {
                    this.tradeField = new XTypedList<tradeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("trade", ""));
                }
                return this.tradeField;
            }
            set {
                if ((value == null)) {
                    this.tradeField = null;
                }
                else {
                    if ((this.tradeField == null)) {
                        this.tradeField = XTypedList<tradeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("trade", ""));
                    }
                    else {
                        XTypedServices.SetList<tradeLocalType>(this.tradeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("trades", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tradesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("trade", ""), typeof(tradeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public partial class tradeLocalType : global::tradeType, IXMetaData {
            
         public static explicit operator tradeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<tradeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public tradeLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("trade", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<tradeLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (paymentmethod)+
    /// </para>
    /// </summary>
    public partial class paymentmethodsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<paymentmethodLocalType> paymentmethodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator paymentmethodsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<paymentmethodsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static paymentmethodsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (paymentmethod)+
        /// </para>
        /// </summary>
        public paymentmethodsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (paymentmethod)+
        /// </para>
        /// </summary>
        public IList<entryType.paymentmethodsLocalType.paymentmethodLocalType> paymentmethod {
            get {
                if ((this.paymentmethodField == null)) {
                    this.paymentmethodField = new XTypedList<paymentmethodLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentmethod", ""));
                }
                return this.paymentmethodField;
            }
            set {
                if ((value == null)) {
                    this.paymentmethodField = null;
                }
                else {
                    if ((this.paymentmethodField == null)) {
                        this.paymentmethodField = XTypedList<paymentmethodLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentmethod", ""));
                    }
                    else {
                        XTypedServices.SetList<paymentmethodLocalType>(this.paymentmethodField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("paymentmethods", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<paymentmethodsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("paymentmethod", ""), typeof(paymentmethodLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public partial class paymentmethodLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator paymentmethodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<paymentmethodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public paymentmethodLocalType() {
            }
            
            public string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string type {
                get {
                    XAttribute x = this.Attribute(XName.Get("type", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("paymentmethod", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<paymentmethodLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (customercard)+
    /// </para>
    /// </summary>
    public partial class customercardsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<customercardLocalType> customercardField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator customercardsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<customercardsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static customercardsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (customercard)+
        /// </para>
        /// </summary>
        public customercardsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (customercard)+
        /// </para>
        /// </summary>
        public IList<entryType.customercardsLocalType.customercardLocalType> customercard {
            get {
                if ((this.customercardField == null)) {
                    this.customercardField = new XTypedList<customercardLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("customercard", ""));
                }
                return this.customercardField;
            }
            set {
                if ((value == null)) {
                    this.customercardField = null;
                }
                else {
                    if ((this.customercardField == null)) {
                        this.customercardField = XTypedList<customercardLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("customercard", ""));
                    }
                    else {
                        XTypedServices.SetList<customercardLocalType>(this.customercardField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("customercards", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<customercardsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("customercard", ""), typeof(customercardLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public partial class customercardLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator customercardLocalType(XElement xe) { return XTypedServices.ToXTypedElement<customercardLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public customercardLocalType() {
            }
            
            public string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("customercard", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<customercardLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phonenumber)+
    /// </para>
    /// </summary>
    public partial class phonenumbersLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phonenumberLocalType> phonenumberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator phonenumbersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<phonenumbersLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static phonenumbersLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phonenumber)+
        /// </para>
        /// </summary>
        public phonenumbersLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (phonenumber)+
        /// </para>
        /// </summary>
        public IList<entryType.phonenumbersLocalType.phonenumberLocalType> phonenumber {
            get {
                if ((this.phonenumberField == null)) {
                    this.phonenumberField = new XTypedList<phonenumberLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("phonenumber", ""));
                }
                return this.phonenumberField;
            }
            set {
                if ((value == null)) {
                    this.phonenumberField = null;
                }
                else {
                    if ((this.phonenumberField == null)) {
                        this.phonenumberField = XTypedList<phonenumberLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("phonenumber", ""));
                    }
                    else {
                        XTypedServices.SetList<phonenumberLocalType>(this.phonenumberField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("phonenumbers", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<phonenumbersLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("phonenumber", ""), typeof(phonenumberLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
        /// </para>
        /// </summary>
        public partial class phonenumberLocalType : global::phonenumberType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator phonenumberLocalType(XElement xe) { return XTypedServices.ToXTypedElement<phonenumberLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static phonenumberLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("description", "")), new NamedContentModelEntity(XName.Get("type", "")), new NamedContentModelEntity(XName.Get("countrycode", "")), new NamedContentModelEntity(XName.Get("area", "")), new NamedContentModelEntity(XName.Get("number", "")), new NamedContentModelEntity(XName.Get("displayphone", "")), new NamedContentModelEntity(XName.Get("pricing", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
            /// </para>
            /// </summary>
            public phonenumberLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("phonenumber", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<phonenumberLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("description", ""), typeof(string));
                localElementDictionary.Add(XName.Get("type", ""), typeof(string));
                localElementDictionary.Add(XName.Get("countrycode", ""), typeof(decimal));
                localElementDictionary.Add(XName.Get("area", ""), typeof(string));
                localElementDictionary.Add(XName.Get("number", ""), typeof(string));
                localElementDictionary.Add(XName.Get("displayphone", ""), typeof(string));
                localElementDictionary.Add(XName.Get("pricing", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (contact)+
    /// </para>
    /// </summary>
    public partial class contactsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<contactLocalType> contactField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator contactsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<contactsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static contactsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (contact)+
        /// </para>
        /// </summary>
        public contactsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (contact)+
        /// </para>
        /// </summary>
        public IList<entryType.contactsLocalType.contactLocalType> contact {
            get {
                if ((this.contactField == null)) {
                    this.contactField = new XTypedList<contactLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("contact", ""));
                }
                return this.contactField;
            }
            set {
                if ((value == null)) {
                    this.contactField = null;
                }
                else {
                    if ((this.contactField == null)) {
                        this.contactField = XTypedList<contactLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("contact", ""));
                    }
                    else {
                        XTypedServices.SetList<contactLocalType>(this.contactField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("contacts", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<contactsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("contact", ""), typeof(contactLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
        /// </para>
        /// </summary>
        public partial class contactLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator contactLocalType(XElement xe) { return XTypedServices.ToXTypedElement<contactLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static contactLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "")), new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("salutation", "")), new NamedContentModelEntity(XName.Get("addition", "")), new NamedContentModelEntity(XName.Get("firstname", "")), new NamedContentModelEntity(XName.Get("lastname", "")), new NamedContentModelEntity(XName.Get("email", "")), new NamedContentModelEntity(XName.Get("phonenumbers", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public contactLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string name {
                get {
                    XElement x = this.GetElement(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string title {
                get {
                    XElement x = this.GetElement(XName.Get("title", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string salutation {
                get {
                    XElement x = this.GetElement(XName.Get("salutation", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("salutation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string addition {
                get {
                    XElement x = this.GetElement(XName.Get("addition", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("addition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string firstname {
                get {
                    XElement x = this.GetElement(XName.Get("firstname", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("firstname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string lastname {
                get {
                    XElement x = this.GetElement(XName.Get("lastname", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("lastname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public string email {
                get {
                    XElement x = this.GetElement(XName.Get("email", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("email", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, title, salutation, addition, firstname, lastname, email, phonenumbers)
            /// </para>
            /// </summary>
            public phonenumbersLocalType phonenumbers {
                get {
                    XElement x = this.GetElement(XName.Get("phonenumbers", ""));
                    return ((phonenumbersLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("phonenumbers", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<int> main {
                get {
                    XAttribute x = this.Attribute(XName.Get("main", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("main", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("contact", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<contactLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                localElementDictionary.Add(XName.Get("salutation", ""), typeof(string));
                localElementDictionary.Add(XName.Get("addition", ""), typeof(string));
                localElementDictionary.Add(XName.Get("firstname", ""), typeof(string));
                localElementDictionary.Add(XName.Get("lastname", ""), typeof(string));
                localElementDictionary.Add(XName.Get("email", ""), typeof(string));
                localElementDictionary.Add(XName.Get("phonenumbers", ""), typeof(phonenumbersLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (phonenumber)+
            /// </para>
            /// </summary>
            public partial class phonenumbersLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<phonenumberType> phonenumberField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
         public static explicit operator phonenumbersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<phonenumbersLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static phonenumbersLocalType() {
                    BuildElementDictionary();
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (phonenumber)+
                /// </para>
                /// </summary>
                public phonenumbersLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (phonenumber)+
                /// </para>
                /// </summary>
                public IList<phonenumberType> phonenumber {
                    get {
                        if ((this.phonenumberField == null)) {
                            this.phonenumberField = new XTypedList<phonenumberType>(this, LinqToXsdTypeManager.Instance, XName.Get("phonenumber", ""));
                        }
                        return this.phonenumberField;
                    }
                    set {
                        if ((value == null)) {
                            this.phonenumberField = null;
                        }
                        else {
                            if ((this.phonenumberField == null)) {
                                this.phonenumberField = XTypedList<phonenumberType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("phonenumber", ""));
                            }
                            else {
                                XTypedServices.SetList<phonenumberType>(this.phonenumberField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("phonenumbers", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<phonenumbersLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("phonenumber", ""), typeof(phonenumberType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (entry)+
    /// </para>
    /// </summary>
    public partial class subentriesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entryType> entryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator subentriesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<subentriesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subentriesLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entry)+
        /// </para>
        /// </summary>
        public subentriesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (entry)+
        /// </para>
        /// </summary>
        public IList<entryType> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entryType>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                    }
                    else {
                        XTypedServices.SetList<entryType>(this.entryField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("subentries", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subentriesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("entry", ""), typeof(entryType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (subsidiaryid)+
    /// </para>
    /// </summary>
    public partial class subsidiariesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> subsidiaryidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator subsidiariesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<subsidiariesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subsidiariesLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (subsidiaryid)+
        /// </para>
        /// </summary>
        public subsidiariesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subsidiaryid)+
        /// </para>
        /// </summary>
        public IList<string> subsidiaryid {
            get {
                if ((this.subsidiaryidField == null)) {
                    this.subsidiaryidField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("subsidiaryid", ""));
                }
                return this.subsidiaryidField;
            }
            set {
                if ((value == null)) {
                    this.subsidiaryidField = null;
                }
                else {
                    if ((this.subsidiaryidField == null)) {
                        this.subsidiaryidField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("subsidiaryid", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.subsidiaryidField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("subsidiaries", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subsidiariesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("subsidiaryid", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (category?, roomprices?, facilities?)
    /// </para>
    /// </summary>
    public partial class hotelinfoLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator hotelinfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hotelinfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static hotelinfoLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("category", "")), new NamedContentModelEntity(XName.Get("roomprices", "")), new NamedContentModelEntity(XName.Get("facilities", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (category?, roomprices?, facilities?)
        /// </para>
        /// </summary>
        public hotelinfoLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (category?, roomprices?, facilities?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> category {
            get {
                XElement x = this.GetElement(XName.Get("category", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElement(XName.Get("category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (category?, roomprices?, facilities?)
        /// </para>
        /// </summary>
        public roompricesLocalType roomprices {
            get {
                XElement x = this.GetElement(XName.Get("roomprices", ""));
                return ((roompricesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("roomprices", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (category?, roomprices?, facilities?)
        /// </para>
        /// </summary>
        public facilitiesLocalType facilities {
            get {
                XElement x = this.GetElement(XName.Get("facilities", ""));
                return ((facilitiesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("facilities", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hotelinfo", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hotelinfoLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("category", ""), typeof(decimal));
            localElementDictionary.Add(XName.Get("roomprices", ""), typeof(roompricesLocalType));
            localElementDictionary.Add(XName.Get("facilities", ""), typeof(facilitiesLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (roomprice)+
        /// </para>
        /// </summary>
        public partial class roompricesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<roompriceLocalType> roompriceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator roompricesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<roompricesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static roompricesLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (roomprice)+
            /// </para>
            /// </summary>
            public roompricesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (roomprice)+
            /// </para>
            /// </summary>
            public IList<entryType.hotelinfoLocalType.roompricesLocalType.roompriceLocalType> roomprice {
                get {
                    if ((this.roompriceField == null)) {
                        this.roompriceField = new XTypedList<roompriceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("roomprice", ""));
                    }
                    return this.roompriceField;
                }
                set {
                    if ((value == null)) {
                        this.roompriceField = null;
                    }
                    else {
                        if ((this.roompriceField == null)) {
                            this.roompriceField = XTypedList<roompriceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("roomprice", ""));
                        }
                        else {
                            XTypedServices.SetList<roompriceLocalType>(this.roompriceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string currency {
                get {
                    XAttribute x = this.Attribute(XName.Get("currency", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("currency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("roomprices", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<roompricesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("roomprice", ""), typeof(roompriceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (type, min, max)+
            /// </para>
            /// </summary>
            public partial class roompriceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> typeField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<float> minField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<float> maxField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
         public static explicit operator roompriceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<roompriceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static roompriceLocalType() {
                    BuildElementDictionary();
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (type, min, max)+
                /// </para>
                /// </summary>
                public roompriceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, min, max)+
                /// </para>
                /// </summary>
                public IList<string> type {
                    get {
                        if ((this.typeField == null)) {
                            this.typeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("type", ""));
                        }
                        return this.typeField;
                    }
                    set {
                        if ((value == null)) {
                            this.typeField = null;
                        }
                        else {
                            if ((this.typeField == null)) {
                                this.typeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("type", ""));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.typeField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, min, max)+
                /// </para>
                /// </summary>
                public IList<float> min {
                    get {
                        if ((this.minField == null)) {
                            this.minField = new XSimpleList<float>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype, XName.Get("min", ""));
                        }
                        return this.minField;
                    }
                    set {
                        if ((value == null)) {
                            this.minField = null;
                        }
                        else {
                            if ((this.minField == null)) {
                                this.minField = XSimpleList<float>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype, value, XName.Get("min", ""));
                            }
                            else {
                                XTypedServices.SetList<System.Single>(this.minField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, min, max)+
                /// </para>
                /// </summary>
                public IList<float> max {
                    get {
                        if ((this.maxField == null)) {
                            this.maxField = new XSimpleList<float>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype, XName.Get("max", ""));
                        }
                        return this.maxField;
                    }
                    set {
                        if ((value == null)) {
                            this.maxField = null;
                        }
                        else {
                            if ((this.maxField == null)) {
                                this.maxField = XSimpleList<float>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype, value, XName.Get("max", ""));
                            }
                            else {
                                XTypedServices.SetList<System.Single>(this.maxField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("roomprice", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<roompriceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("type", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("min", ""), typeof(float));
                    localElementDictionary.Add(XName.Get("max", ""), typeof(float));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
                
                private class typeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "single",
                                    "double",
                                    "suite"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private typeLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (facility)+
        /// </para>
        /// </summary>
        public partial class facilitiesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<facilityLocalType> facilityField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator facilitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<facilitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static facilitiesLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (facility)+
            /// </para>
            /// </summary>
            public facilitiesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (facility)+
            /// </para>
            /// </summary>
            public IList<entryType.hotelinfoLocalType.facilitiesLocalType.facilityLocalType> facility {
                get {
                    if ((this.facilityField == null)) {
                        this.facilityField = new XTypedList<facilityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("facility", ""));
                    }
                    return this.facilityField;
                }
                set {
                    if ((value == null)) {
                        this.facilityField = null;
                    }
                    else {
                        if ((this.facilityField == null)) {
                            this.facilityField = XTypedList<facilityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("facility", ""));
                        }
                        else {
                            XTypedServices.SetList<facilityLocalType>(this.facilityField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("facilities", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<facilitiesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("facility", ""), typeof(facilityLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (type, title)
            /// </para>
            /// </summary>
            public partial class facilityLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator facilityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<facilityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static facilityLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "")), new NamedContentModelEntity(XName.Get("title", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (type, title)
                /// </para>
                /// </summary>
                public facilityLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, title)
                /// </para>
                /// </summary>
                public string type {
                    get {
                        XElement x = this.GetElement(XName.Get("type", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("type", ""), value, "type", typeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, title)
                /// </para>
                /// </summary>
                public string title {
                    get {
                        XElement x = this.GetElement(XName.Get("title", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<decimal> id {
                    get {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("facility", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<facilityLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("type", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class typeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "room",
                                    "hotel",
                                    "service",
                                    "symbol"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private typeLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (rating)+
    /// </para>
    /// </summary>
    public partial class ratingsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ratingLocalType> ratingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ratingsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ratingsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ratingsLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (rating)+
        /// </para>
        /// </summary>
        public ratingsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (rating)+
        /// </para>
        /// </summary>
        public IList<entryType.ratingsLocalType.ratingLocalType> rating {
            get {
                if ((this.ratingField == null)) {
                    this.ratingField = new XTypedList<ratingLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("rating", ""));
                }
                return this.ratingField;
            }
            set {
                if ((value == null)) {
                    this.ratingField = null;
                }
                else {
                    if ((this.ratingField == null)) {
                        this.ratingField = XTypedList<ratingLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("rating", ""));
                    }
                    else {
                        XTypedServices.SetList<ratingLocalType>(this.ratingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<float> average {
            get {
                XAttribute x = this.Attribute(XName.Get("average", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("average", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> count {
            get {
                XAttribute x = this.Attribute(XName.Get("count", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<float> score {
            get {
                XAttribute x = this.Attribute(XName.Get("score", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("score", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ratings", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ratingsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("rating", ""), typeof(ratingLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (user, message?, points, date)
        /// </para>
        /// </summary>
        public partial class ratingLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator ratingLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ratingLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ratingLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("user", "")), new NamedContentModelEntity(XName.Get("message", "")), new NamedContentModelEntity(XName.Get("points", "")), new NamedContentModelEntity(XName.Get("date", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (user, message?, points, date)
            /// </para>
            /// </summary>
            public ratingLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (user, message?, points, date)
            /// </para>
            /// </summary>
            public userLocalType user {
                get {
                    XElement x = this.GetElement(XName.Get("user", ""));
                    return ((userLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("user", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (user, message?, points, date)
            /// </para>
            /// </summary>
            public string message {
                get {
                    XElement x = this.GetElement(XName.Get("message", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("message", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (user, message?, points, date)
            /// </para>
            /// </summary>
            public int points {
                get {
                    XElement x = this.GetElement(XName.Get("points", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElement(XName.Get("points", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (user, message?, points, date)
            /// </para>
            /// </summary>
            public System.DateTime date {
                get {
                    XElement x = this.GetElement(XName.Get("date", ""));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElement(XName.Get("date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("rating", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ratingLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("user", ""), typeof(userLocalType));
                localElementDictionary.Add(XName.Get("message", ""), typeof(string));
                localElementDictionary.Add(XName.Get("points", ""), typeof(int));
                localElementDictionary.Add(XName.Get("date", ""), typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nickname?)?
            /// </para>
            /// </summary>
            public partial class userLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator userLocalType(XElement xe) { return XTypedServices.ToXTypedElement<userLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static userLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nickname", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nickname?)?
                /// </para>
                /// </summary>
                public userLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (nickname?)?
                /// </para>
                /// </summary>
                public string nickname {
                    get {
                        XElement x = this.GetElement(XName.Get("nickname", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("nickname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string id {
                    get {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("user", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<userLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("nickname", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
}

public sealed class booleanType {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                    0,
                    1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    
    private booleanType() {
    }
}

/// <summary>
/// <para>
/// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
/// </para>
/// </summary>
public partial class locationType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator locationType(XElement xe) { return XTypedServices.ToXTypedElement<locationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static locationType() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("streetnumber", "")), new NamedContentModelEntity(XName.Get("street", "")), new NamedContentModelEntity(XName.Get("addition", "")), new NamedContentModelEntity(XName.Get("zipcode", "")), new NamedContentModelEntity(XName.Get("district", "")), new NamedContentModelEntity(XName.Get("city", "")), new NamedContentModelEntity(XName.Get("county", "")), new NamedContentModelEntity(XName.Get("state", "")), new NamedContentModelEntity(XName.Get("country", "")), new NamedContentModelEntity(XName.Get("longitude", "")), new NamedContentModelEntity(XName.Get("latitude", "")), new NamedContentModelEntity(XName.Get("display1", "")), new NamedContentModelEntity(XName.Get("display2", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public locationType() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string streetnumber {
        get {
            XElement x = this.GetElement(XName.Get("streetnumber", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("streetnumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string street {
        get {
            XElement x = this.GetElement(XName.Get("street", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("street", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string addition {
        get {
            XElement x = this.GetElement(XName.Get("addition", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("addition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string zipcode {
        get {
            XElement x = this.GetElement(XName.Get("zipcode", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("zipcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string district {
        get {
            XElement x = this.GetElement(XName.Get("district", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("district", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string city {
        get {
            XElement x = this.GetElement(XName.Get("city", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("city", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string county {
        get {
            XElement x = this.GetElement(XName.Get("county", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("county", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string state {
        get {
            XElement x = this.GetElement(XName.Get("state", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string country {
        get {
            XElement x = this.GetElement(XName.Get("country", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("country", ""), value, "country", countryLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public System.Nullable<float> longitude {
        get {
            XElement x = this.GetElement(XName.Get("longitude", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
        }
        set {
            this.SetElement(XName.Get("longitude", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public System.Nullable<float> latitude {
        get {
            XElement x = this.GetElement(XName.Get("latitude", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
        }
        set {
            this.SetElement(XName.Get("latitude", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string display1 {
        get {
            XElement x = this.GetElement(XName.Get("display1", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("display1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (streetnumber, street, addition?, zipcode, district, city, county, state, country, longitude?, latitude?, display1?, display2?)
    /// </para>
    /// </summary>
    public string display2 {
        get {
            XElement x = this.GetElement(XName.Get("display2", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("display2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string id {
        get {
            XAttribute x = this.Attribute(XName.Get("id", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("locationType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<locationType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("streetnumber", ""), typeof(string));
        localElementDictionary.Add(XName.Get("street", ""), typeof(string));
        localElementDictionary.Add(XName.Get("addition", ""), typeof(string));
        localElementDictionary.Add(XName.Get("zipcode", ""), typeof(string));
        localElementDictionary.Add(XName.Get("district", ""), typeof(string));
        localElementDictionary.Add(XName.Get("city", ""), typeof(string));
        localElementDictionary.Add(XName.Get("county", ""), typeof(string));
        localElementDictionary.Add(XName.Get("state", ""), typeof(string));
        localElementDictionary.Add(XName.Get("country", ""), typeof(string));
        localElementDictionary.Add(XName.Get("longitude", ""), typeof(float));
        localElementDictionary.Add(XName.Get("latitude", ""), typeof(float));
        localElementDictionary.Add(XName.Get("display1", ""), typeof(string));
        localElementDictionary.Add(XName.Get("display2", ""), typeof(string));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    private class countryLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private countryLocalType() {
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (display, link)
/// </para>
/// </summary>
public partial class urlType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator urlType(XElement xe) { return XTypedServices.ToXTypedElement<urlType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static urlType() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("display", "")), new NamedContentModelEntity(XName.Get("link", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (display, link)
    /// </para>
    /// </summary>
    public urlType() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (display, link)
    /// </para>
    /// </summary>
    public string display {
        get {
            XElement x = this.GetElement(XName.Get("display", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("display", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (display, link)
    /// </para>
    /// </summary>
    public string link {
        get {
            XElement x = this.GetElement(XName.Get("link", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("link", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public System.Nullable<int> main {
        get {
            XAttribute x = this.Attribute(XName.Get("main", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("main", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("urlType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<urlType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("display", ""), typeof(string));
        localElementDictionary.Add(XName.Get("link", ""), typeof(string));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

public partial class emailType : XTypedElement, IXMetaData {
    
         public static explicit operator emailType(XElement xe) { return XTypedServices.ToXTypedElement<emailType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    public emailType() {
    }
    
    public string TypedValue {
        get {
            XElement x = this.Untyped;
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public System.Nullable<int> main {
        get {
            XAttribute x = this.Attribute(XName.Get("main", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("main", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("emailType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<emailType>(this);
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

public sealed class mimetypeType {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
    
    private mimetypeType() {
    }
}

public sealed class unitType {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                    "metric"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
    
    private unitType() {
    }
}

/// <summary>
/// <para>
/// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
/// </para>
/// </summary>
public partial class phonenumberType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator phonenumberType(XElement xe) { return XTypedServices.ToXTypedElement<phonenumberType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static phonenumberType() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("description", "")), new NamedContentModelEntity(XName.Get("type", "")), new NamedContentModelEntity(XName.Get("countrycode", "")), new NamedContentModelEntity(XName.Get("area", "")), new NamedContentModelEntity(XName.Get("number", "")), new NamedContentModelEntity(XName.Get("displayphone", "")), new NamedContentModelEntity(XName.Get("pricing", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public phonenumberType() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public string description {
        get {
            XElement x = this.GetElement(XName.Get("description", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public string type {
        get {
            XElement x = this.GetElement(XName.Get("type", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("type", ""), value, "type", typeLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public decimal countrycode {
        get {
            XElement x = this.GetElement(XName.Get("countrycode", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
        set {
            this.SetElement(XName.Get("countrycode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public string area {
        get {
            XElement x = this.GetElement(XName.Get("area", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("area", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public string number {
        get {
            XElement x = this.GetElement(XName.Get("number", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public string displayphone {
        get {
            XElement x = this.GetElement(XName.Get("displayphone", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("displayphone", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (description, type, countrycode, area, number, displayphone, pricing)
    /// </para>
    /// </summary>
    public string pricing {
        get {
            XElement x = this.GetElement(XName.Get("pricing", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("pricing", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public System.Nullable<int> main {
        get {
            XAttribute x = this.Attribute(XName.Get("main", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("main", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("phonenumberType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<phonenumberType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("description", ""), typeof(string));
        localElementDictionary.Add(XName.Get("type", ""), typeof(string));
        localElementDictionary.Add(XName.Get("countrycode", ""), typeof(decimal));
        localElementDictionary.Add(XName.Get("area", ""), typeof(string));
        localElementDictionary.Add(XName.Get("number", ""), typeof(string));
        localElementDictionary.Add(XName.Get("displayphone", ""), typeof(string));
        localElementDictionary.Add(XName.Get("pricing", ""), typeof(string));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    private class typeLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "phone",
                        "fax",
                        "mobile"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private typeLocalType() {
        }
    }
}

public sealed class currencyType {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                    "EUR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
    
    private currencyType() {
    }
}

public partial class tradeType : XTypedElement, IXMetaData {
    
         public static explicit operator tradeType(XElement xe) { return XTypedServices.ToXTypedElement<tradeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    public tradeType() {
    }
    
    public string TypedValue {
        get {
            XElement x = this.Untyped;
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public System.Nullable<decimal> id {
        get {
            XAttribute x = this.Attribute(XName.Get("id", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("tradeType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<tradeType>(this);
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

public partial class response : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private responseType ContentField;
    
         public static explicit operator response(XElement xe) { return XTypedServices.ToXTypedElement<response, responseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    public response() {
        SetInnerType(new responseType());
    }
    
    public response(responseType content) {
        SetInnerType(content);
    }
    
    public override XElement Untyped {
        get {
            return base.Untyped;
        }
        set {
            base.Untyped = value;
            this.ContentField.Untyped = value;
        }
    }
    
    public responseType Content {
        get {
            return ContentField;
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public responseType.hintLocalType hint {
        get {
            return this.ContentField.hint;
        }
        set {
            this.ContentField.hint = value;
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public responseType.errorLocalType error {
        get {
            return this.ContentField.error;
        }
        set {
            this.ContentField.error = value;
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (hint?, (error? | results*))
    /// </para>
    /// </summary>
    public IList<resultsType> results {
        get {
            return this.ContentField.results;
        }
        set {
            this.ContentField.results = value;
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string type {
        get {
            return this.ContentField.type;
        }
        set {
            this.ContentField.type = value;
        }
    }
    
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
            return schemaMetaData.LocalElementsDictionary;
        }
    }
    
    XTypedElement IXMetaData.Content {
        get {
            return this.Content;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("response", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static response Load(string xmlFile) {
        return XTypedServices.Load<response, responseType>(xmlFile, LinqToXsdTypeManager.Instance);
    }
    
    public static response Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<response, responseType>(xmlFile, LinqToXsdTypeManager.Instance);
    }
    
    public static response Parse(string xml) {
        return XTypedServices.Parse<response, responseType>(xml, LinqToXsdTypeManager.Instance);
    }
    
    public override XTypedElement Clone() {
        return new response(((responseType)(this.Content.Clone())));
    }
    
    private void SetInnerType(responseType ContentField) {
        this.ContentField = ((responseType)(XTypedServices.GetCloneIfRooted(ContentField)));
        XTypedServices.SetName(this, this.ContentField);
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildTypeDictionary();
        BuildElementDictionary();
        BuildWrapperDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return typeDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return wrapperDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildTypeDictionary() {
        typeDictionary.Add(XName.Get("responseType", ""), typeof(global::responseType));
        typeDictionary.Add(XName.Get("resultsType", ""), typeof(global::resultsType));
        typeDictionary.Add(XName.Get("entryType", ""), typeof(global::entryType));
        typeDictionary.Add(XName.Get("locationType", ""), typeof(global::locationType));
        typeDictionary.Add(XName.Get("urlType", ""), typeof(global::urlType));
        typeDictionary.Add(XName.Get("emailType", ""), typeof(global::emailType));
        typeDictionary.Add(XName.Get("phonenumberType", ""), typeof(global::phonenumberType));
        typeDictionary.Add(XName.Get("tradeType", ""), typeof(global::tradeType));
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("response", ""), typeof(global::response));
    }
    
    private static void BuildWrapperDictionary() {
        wrapperDictionary.Add(typeof(response), typeof(void));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("response", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public response response {  get {return rootObject as response; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(response root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public response response {  get {return rootObject as response; } }
    
    private XRoot() {
    }
    
    public XRoot(response root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}
